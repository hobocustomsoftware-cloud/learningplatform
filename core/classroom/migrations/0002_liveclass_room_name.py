# Generated by Django 5.2.5 on 2025-08-26 08:13

from django.db import migrations, models
from django.db import transaction


def populate_room_names(apps, schema_editor):
    """Populate room_name for existing LiveClass records"""
    LiveClass = apps.get_model('classroom', 'LiveClass')
    db_alias = schema_editor.connection.alias
    
    # Get all existing LiveClass records
    live_classes = LiveClass.objects.using(db_alias).all()
    
    for live_class in live_classes:
        if not live_class.room_name:
            # Generate a unique room name
            base_name = f"course{live_class.course_id}" if live_class.course_id else "liveclass"
            
            # Add random string to make it unique and non-guessable
            import secrets
            import string
            random_string = ''.join(secrets.choice(string.ascii_lowercase + string.digits) for _ in range(12))
            room_name = f"{base_name}-{random_string}"
            
            # Ensure uniqueness
            counter = 1
            original_room_name = room_name
            while LiveClass.objects.using(db_alias).filter(room_name=room_name).exists():
                room_name = f"{original_room_name}-{counter}"
                counter += 1
                
            live_class.room_name = room_name
            live_class.save(using=db_alias)


def reverse_populate_room_names(apps, schema_editor):
    """Reverse operation - not needed for this case"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('classroom', '0001_initial'),
    ]

    operations = [
        # First add the field without unique constraint
        migrations.AddField(
            model_name='liveclass',
            name='room_name',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        # Then populate room_name for existing records
        migrations.RunPython(populate_room_names, reverse_populate_room_names),
        # Finally add the unique constraint
        migrations.AlterField(
            model_name='liveclass',
            name='room_name',
            field=models.CharField(blank=True, max_length=255, null=True, unique=True),
        ),
    ]
